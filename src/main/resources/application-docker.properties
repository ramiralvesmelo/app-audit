# ==================================================================================================================
# 						APP CONFIG (PROFILE: docker)
# ==================================================================================================================
server.address=0.0.0.0
server.port=8080

# ==================================================================================================================
# 					LOGGING CONFIG - SPRING BOOT
# ==================================================================================================================
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
logging.level.org.springframework=INFO
logging.level.root=INFO
# ANALISE KEYCLOAK
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG

# ==================================================================================================================
# 					DATABASE - SPRING BOOT (PostgreSQL - container)
# ==================================================================================================================
spring.datasource.url=jdbc:postgresql://postgres:5432/appdb
spring.datasource.username=appuser
spring.datasource.password=apppass
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.format_sql=false
# evita createClob
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# nao executar schema.sql / data.sql no Docker
# spring.sql.init.mode=always
spring.sql.init.mode=never
spring.sql.init.encoding=UTF-8

# ==================================================================================================================
# 						KAFKA - BROKER (rede docker)
# ==================================================================================================================
spring.kafka.bootstrap-servers=kafka:9092

# ==================================================================================================================
# 						KAFKA - TOPICO / PUBLISH
# ==================================================================================================================
app.kafka.topic.order-finalized=orders.finalized

# Producer (String key + JSON value)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=true
spring.kafka.template.default-topic=${app.kafka.topic.order-finalized}

# ==================================================================================================================
# 						KAFKA - CONSUMER / SUBSCRIBE
# ==================================================================================================================
spring.kafka.consumer.group-id=erp-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.use.type.headers=true
spring.kafka.consumer.properties.spring.json.trusted.packages=br.com.ramiralvesmelo.audit.message.event

# ==================================================================================================================
# 						KAFKA - LISTENER / ADMIN
# ==================================================================================================================
spring.kafka.listener.auto-startup=true
spring.kafka.admin.auto-create=false

# ==================================================================================================================
# 						KEYCLOAK - OIDC / Resource Server (container)
# ==================================================================================================================
# Resource Server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8081/realms/app-demo
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://host.docker.internal:8081/realms/app-demo
spring.security.oauth2.resourceserver.jwt.clock-skew=30s

# ==================================================================================================================
# 									ACTUATOR
# ==================================================================================================================
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=never
management.endpoint.health.probes.enabled=true
# management.endpoints.web.base-path=/actuator

# ==================================================================================================================
#                                  Redis (cache + session) - container
# ==================================================================================================================
spring.data.redis.host=redis
spring.data.redis.port=6379
spring.data.redis.timeout=3s
spring.session.store-type=redis
spring.session.redis.namespace=app-demo:sessions
spring.session.redis.flush-mode=ON_SAVE
server.servlet.session.timeout=30m
spring.cache.type=redis
spring.cache.redis.time-to-live=10m
spring.cache.redis.key-prefix=app-demo:cache:
spring.cache.redis.cache-null-values=false
# spring.cache.redis.enable-statistics=true

# ==================================================================================================================
# 									Swagger
# ================================================================================================================== 
# === springdoc ===
springdoc.paths-to-match=/api/**
springdoc.packages-to-scan=br.com.ramiralvesmelo.audit.controller
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.cache.disabled=true

# Fluxo OAuth2 da UI do Swagger
springdoc.swagger-ui.oauth.realm=app-demo
springdoc.swagger-ui.oauth.client-id=app-demo-api
springdoc.swagger-ui.oauth.auth-url=http://keycloak:8081/realms/app-demo/protocol/openid-connect/auth
springdoc.swagger-ui.oauth.token-url=http://keycloak:8081/realms/app-demo/protocol/openid-connect/token
springdoc.swagger-ui.oauth2-redirect-url=http://localhost:8080/swagger-ui/oauth2-redirect.html

# Client PUBLIC (sem secret) => PKCE ligado
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code=true
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=true
# Se o client for CONFIDENTIAL:
# springdoc.swagger-ui.oauth.client-secret=SEU_CLIENT_SECRET
# springdoc.swagger-ui.oauth.use-pkce-with-authorization-code=false