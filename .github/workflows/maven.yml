name: Executar GitAction

on:
  workflow_dispatch:
    inputs:
      project_dir:
        description: "Diret√≥rio do projeto (contexto do Docker)"
        required: true
        default: "."
      module_gav:
        description: "GAV alvo (GroupId, ArtifactId, Version)"
        required: false
        default: ""

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  ci:
    name: "üîç CI ‚Üí An√°lise de C√≥digo & Cobertura"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      MAVEN_USERNAME: ramiralvesmelo
      MAVEN_PASSWORD: ${{ secrets.GH_PACKAGES_TOKEN }}      

    steps:
      - name: "üì• Checkout do reposit√≥rio"
        uses: actions/checkout@v4

      - name: üßπ Remover jacocoArgLine vazio do pom.xml
        run: |
          sed -i 's|<jacocoArgLine></jacocoArgLine>||g' pom.xml
          echo "‚úÖ jacocoArgLine removido do pom.xml"              

      - name: "‚öôÔ∏è JDK 24 + cache Maven + credencial (read via PAT)"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "24"
          cache: maven
          check-latest: true
          # Gera ~/.m2/settings.xml automaticamente com <servers>
          server-id: github-ramir-util             
          server-username: MAVEN_USERNAME          
          server-password: MAVEN_PASSWORD          

      - name: "üîé Verificar Vers√£o Java | Maven"
        run: |
          java -version
          mvn -v
          echo "Mostrando servers do settings (mascarado):"
          sed 's|<password>.*</password>|<password>***</password>|' ~/.m2/settings.xml | head -n 40

      - name: "üõ†Ô∏è Build + Test + Coverage (jacoco.xml)"
        working-directory: ${{ github.event.inputs.project_dir }}
        run: |
          set -e
          if [ -n "${{ github.event.inputs.module_gav }}" ]; then
            mvn -B -V -s ~/.m2/settings.xml -DskipTests=false clean verify -am -pl "${{ github.event.inputs.module_gav }}"
          else
            mvn -B -V -s ~/.m2/settings.xml -DskipTests=false clean verify
          fi
          echo "Procurando jacoco.xml‚Ä¶"
          find . -type f -path "*/target/site/jacoco/jacoco.xml" -printf "%p\n" || true
          test -n "$(find . -type f -path "*/target/site/jacoco/jacoco.xml" -print -quit)" || { echo "jacoco.xml n√£o encontrado"; exit 1; }

      - name: "üìà Enviar cobertura para o Codecov"
        if: ${{ !cancelled() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: "**/target/site/jacoco/jacoco.xml"
          slug: ${{ github.repository }}
          fail_ci_if_error: true
          verbose: false

      - name: "üîé SonarCloud (Aguarda Quality Gate)"
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        working-directory: ${{ github.event.inputs.project_dir }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B -V -s ~/.m2/settings.xml \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login="${SONAR_TOKEN}" \
            -Dsonar.organization=ramiralvesmelo \
            -Dsonar.projectKey=ramiralvesmelo_app-demo \
            -Dsonar.coverage.jacoco.xmlReportPaths="**/target/site/jacoco/jacoco.xml" \
            -Dsonar.qualitygate.wait=true \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      - name: "üì¶ Gerar SBOM (CycloneDX)"
        working-directory: ${{ github.event.inputs.project_dir }}
        run: mvn -B -s ~/.m2/settings.xml cyclonedx:makeAggregateBom --no-transfer-progress

      - name: "üì§ Publicar SBOM como artefato"
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: |
            ${{ github.event.inputs.project_dir }}/target/bom.xml
            ${{ github.event.inputs.project_dir }}/target/bom.json
            ${{ github.event.inputs.project_dir }}/target/*-cyclonedx.xml
            ${{ github.event.inputs.project_dir }}/target/*-cyclonedx.json
          if-no-files-found: error
          overwrite: true

      - name: "üìä Enviar snapshot de depend√™ncias (Dependabot/Graph)"
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        uses: advanced-security/maven-dependency-submission-action@v4

  cd:
    name: "üöÄ CD ‚Üí Imagem Docker & Deploy (Git Hub Container Registry)"
    runs-on: ubuntu-latest
    needs: ci
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      contents: write
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      MAVEN_USERNAME: ramiralvesmelo      
      MAVEN_PASSWORD: ${{ secrets.GH_PACKAGES_TOKEN }}  # PAT classic com read:packages (e repo se privado)

    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4

      - name: "üß± Docker Buildx (setup)"
        uses: docker/setup-buildx-action@v3

      - name: "üîë Login no GHCR"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "üè∑Ô∏è Metadados da imagem (tags/labels)"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ramiralvesmelo/app-demo
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short,prefix=sha-
            type=ref,event=branch
            type=ref,event=tag

      # cria o arquivo de settings.xml e injeta as credenciais
      - name: "üßæ Criar maven-settings.xml (arquivo)"
        id: prep-settings
        shell: bash
        run: |
          set -euo pipefail
          cat > "$RUNNER_TEMP/maven-settings.xml" <<'XML'
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github-ramir-util</id>
                <username>${MAVEN_USERNAME}</username>
                <password>${MAVEN_PASSWORD}</password>
              </server>
            </servers>
          </settings>
          XML
          sed -i 's|${MAVEN_USERNAME}|'"${MAVEN_USERNAME}"'|g' "$RUNNER_TEMP/maven-settings.xml"
          sed -i 's|${MAVEN_PASSWORD}|'"${MAVEN_PASSWORD}"'|g' "$RUNNER_TEMP/maven-settings.xml"
          test -s "$RUNNER_TEMP/maven-settings.xml"
          echo "path=$RUNNER_TEMP/maven-settings.xml" >> "$GITHUB_OUTPUT"

      - name: "üëÄ Conferir settings (mascarado)"
        shell: bash
        run: |
          ls -l "${{ steps.prep-settings.outputs.path }}"
          sed 's|\(<password>\).*\(</password>\)|\1***\2|' "${{ steps.prep-settings.outputs.path }}" | head -n 20

      - name: "üê≥ Build & Push (secret-files)"
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.event.inputs.project_dir }}
          file: ${{ github.event.inputs.project_dir }}/infra/docker/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # IMPORTANTE!!! Passa o settings.xml para dentro do build (via BuildKit)
          secret-files: |
            maven_settings=${{ steps.prep-settings.outputs.path }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Trechos opcionais (comentado) ---
      # - name: "‚öôÔ∏è JDK para deploy + credencial (serverId=github)"
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: temurin
      #     java-version: "24"
      #     cache: maven
      #     check-latest: true
      #     server-id: github
      #     server-username: GITHUB_ACTOR
      #     server-password: GITHUB_TOKEN
      #
      # - name: "üöÄ Deploy no GitHub Packages (Maven Repository)"
      #   working-directory: ${{ github.event.inputs.project_dir }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     OWNER_REPO="${{ github.repository }}"
      #     mvn -B -V -s ~/.m2/settings.xml \
      #       -DskipTests \
      #       -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${OWNER_REPO} \
      #       deploy
